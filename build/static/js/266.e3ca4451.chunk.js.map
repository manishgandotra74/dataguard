{"version":3,"file":"static/js/266.e3ca4451.chunk.js","mappings":"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","sources":["redux/apis/plugin.api.js","redux/actions/plugin.action.js","redux/actions/index.js","views/marketing/marketing.jsx"],"sourcesContent":["import axios from 'axios'\r\nconst JSON_URL = 'http://localhost:5000/'\r\n /*\r\n    Get All Plugins\r\n  */\r\nconst getPlugins_service = async (type) => {\r\n  return axios.get(`${JSON_URL}tabdata?path=${type}`)\r\n    .then((response) => {\r\n      return response?.data?.[0]\r\n    })\r\n    .catch((reason) => {\r\n      if (reason.response) {\r\n        return reason.response\r\n      }\r\n    })\r\n};\r\n /*\r\n    Get All Tabs\r\n  */\r\nconst getTabs_service = async () => {\r\n  return axios.get(`${JSON_URL}tabdata`)\r\n    .then((response) => {\r\n      return response.data\r\n    })\r\n    .catch((reason) => {\r\n      if (reason.response) {\r\n        return reason.response\r\n      }\r\n    })\r\n};\r\n /*\r\n    Get Filtered Plugins\r\n  */\r\nconst getFilteredPlugins_service = async (filter) => {\r\n  return axios.get(`${JSON_URL}plugins?${filter}`)\r\n    .then((response) => {\r\n      return response.data\r\n    })\r\n    .catch((reason) => {\r\n      if (reason.response) {\r\n        return reason.response\r\n      }\r\n    })\r\n};\r\n /*\r\n    Update Status of Plugin\r\n  */\r\nconst update_status_service = async (id, data) => {\r\n  return axios.put(`${JSON_URL}plugins/${id}`, data)\r\n    .then((response) => {\r\n      return response.data\r\n    })\r\n    .catch((reason) => {\r\n      if (reason.response) {\r\n        return reason.response\r\n      }\r\n    })\r\n};\r\n /*\r\n    Get Overall Status of Plugins\r\n  */\r\nconst plugin_status_service = async () => {\r\n  return axios.get(`${JSON_URL}plugin_status`)\r\n    .then((response) => {\r\n      return response.data\r\n    })\r\n    .catch((reason) => {\r\n      if (reason.response) {\r\n        return reason.response\r\n      }\r\n    })\r\n};\r\n /*\r\n    Update Overall Status of Plugins\r\n  */\r\nconst update_plugin_status_service = async (data) => {\r\n  return axios.put(`${JSON_URL}plugin_status`, data)\r\n    .then((response) => {\r\n      return response.data\r\n    })\r\n    .catch((reason) => {\r\n      if (reason.response) {\r\n        return reason.response\r\n      }\r\n    })\r\n};\r\nexport default {\r\n  getPlugins_service,\r\n  getTabs_service,\r\n  getFilteredPlugins_service,\r\n  update_status_service,\r\n  plugin_status_service,\r\n  update_plugin_status_service\r\n};\r\n","import API from \"../apis/plugin.api\";\r\nimport { Types } from \"../types/plugin.types\";\r\n\r\n /*\r\n    Get All Plugins\r\n  */\r\nconst getPlugins = (type) => {\r\n  return async function (dispatch) {\r\n    try {\r\n      let user = await API.getPlugins_service(type);\r\n      dispatch({ type: Types.FETCHED_PLUGINS_SUCCESSFULLY, payload: user });\r\n\r\n    } catch (err) {\r\n      dispatch({ type: Types.SERVER_ERROR, payload: null });\r\n    }\r\n  };\r\n}\r\n /*\r\n    Get All Tabs\r\n  */\r\nconst getTabs = () => {\r\n  return async function (dispatch) {\r\n    try {\r\n      let user = await API.getTabs_service();\r\n      dispatch({ type: Types.FETCHED_TABS_SUCCESSFULLY, payload: user });\r\n\r\n    } catch (err) {\r\n      dispatch({ type: Types.SERVER_ERROR, payload: null });\r\n    }\r\n  };\r\n}\r\n /*\r\n    Get Filtered Plugins\r\n  */\r\nconst getFilteredPlugins = (filter) => {\r\n  return async function (dispatch) {\r\n    try {\r\n      let user = await API.getFilteredPlugins_service(filter);\r\n      dispatch({ type: Types.FILTERED_FETCHED_PLUGINS_SUCCESSFULLY, payload: user });\r\n\r\n    } catch (err) {\r\n      dispatch({ type: Types.SERVER_ERROR, payload: null });\r\n    }\r\n  };\r\n}\r\n /*\r\n    Update Status of Plugin\r\n  */\r\nconst updateStatus = (value  ,id) => {\r\n  value.status  = id ? \"active\":\"inactive\"\r\n\r\n  return async function (dispatch) {\r\n    try {\r\n      let user = await API.update_status_service(value.id, value);\r\n      dispatch({ type: Types.PLUGINS_UPDATED_SUCCESSFULLY, payload: user });\r\n\r\n    } catch (err) {\r\n      dispatch({ type: Types.SERVER_ERROR, payload: null });\r\n    }\r\n  };\r\n}\r\n /*\r\n    Get Overall Status of Plugins\r\n  */\r\nconst pluginStatus = () => {\r\n\r\n  return async function (dispatch) {\r\n    try {\r\n      let user = await API.plugin_status_service();\r\n      dispatch({ type: Types.PLUGIN_STATUS_FETCHED_SUCCESSFULLY, payload: user });\r\n\r\n    } catch (err) {\r\n      dispatch({ type: Types.SERVER_ERROR, payload: null });\r\n    }\r\n  };\r\n}\r\n /*\r\n    Update Overall Status of Plugins\r\n  */\r\nconst updatePluginStatus = (status ) => {\r\nconst value = {\r\n  \"enabled\": status\r\n}\r\n  return async function (dispatch) {\r\n    try {\r\n      let user = await API.update_plugin_status_service( value);\r\n      dispatch({ type: Types.PLUGIN_STATUS_UPDATED_SUCCESSFULLY, payload: user });\r\n\r\n    } catch (err) {\r\n      dispatch({ type: Types.SERVER_ERROR, payload: null });\r\n    }\r\n  };\r\n}\r\nexport default {\r\n    getTabs,\r\n    getPlugins,\r\n    getFilteredPlugins,\r\n    updateStatus,\r\n    pluginStatus,\r\n    updatePluginStatus\r\n}","import pluginActions from './plugin.action'\r\n /*\r\n    List of All actions\r\n  */\r\nconst allActions = {\r\n    pluginActions,\r\n}\r\n\r\nexport default allActions","import React from \"react\"\r\nimport allActions from '../../redux/actions/index'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nconst Card = React.lazy(() => import(\"../../components/PluginCard/PluginCard\"));\r\nexport default function Marketing() {\r\n  const dispatch = useDispatch()\r\n  const plugin = useSelector((state) => state.plugin)\r\n  /*\r\n        Get Callback from card \r\n  */\r\n        function cardCallback(value, id) {\r\n          dispatch(allActions.pluginActions.updateStatus(id, value))\r\n  \r\n      }\r\n      /*\r\n          Get plugins name\r\n    */\r\n  React.useEffect(() => {\r\n    dispatch(allActions.pluginActions.getPlugins('marketing'))\r\n  }, [])\r\n    /*\r\n        Get plugins information \r\n  */\r\n  React.useEffect(() => {\r\n    if (plugin?.plugins && plugin?.plugins.title) {\r\n      let pluginArray = plugin?.plugins?.plugins.sort()\r\n\r\n      let arr = ''\r\n      let query_params = pluginArray.map(item => arr = arr + 'id=' + item + '&')\r\n      dispatch(allActions.pluginActions.getFilteredPlugins(query_params))\r\n\r\n    }\r\n  }, [plugin?.plugins?.title])\r\n  return <Row>\r\n    {plugin?.filteredPlugins?.map((item, index) => <Col sm={4} key={index}>\r\n      <Card data={item} status={plugin.allpluginStatus} cardCallback={cardCallback}></Card></Col>)}\r\n  </Row>\r\n}"],"names":["JSON_URL","getPlugins_service","type","axios","then","response","data","catch","reason","getTabs_service","getFilteredPlugins_service","filter","update_status_service","id","plugin_status_service","update_plugin_status_service","getTabs","dispatch","API","user","Types","payload","getPlugins","getFilteredPlugins","updateStatus","value","status","pluginStatus","updatePluginStatus","pluginActions","Card","React","Marketing","useDispatch","plugin","useSelector","state","cardCallback","allActions","plugins","title","pluginArray","sort","arr","query_params","map","item","filteredPlugins","index","sm","allpluginStatus"],"sourceRoot":""}